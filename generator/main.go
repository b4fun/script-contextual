package main

import (
	"bytes"
	"flag"
	"fmt"
	"go/ast"
	"go/parser"
	"go/token"
	"reflect"
	"sort"
	"strings"
	"text/template"

	"github.com/bitfield/script"
)

func pipeFromBitfield() map[string]reflect.Method {
	p := script.NewPipe()
	pipeType := reflect.ValueOf(p).Type()
	methods := make(map[string]reflect.Method)
	for i := 0; i < pipeType.NumMethod(); i++ {
		method := pipeType.Method(i)
		// take method returning *Pipe
		if method.Func.Type().NumOut() != 1 {
			continue
		}
		if method.Func.Type().Out(0) != reflect.TypeOf(p) {
			continue
		}
		methods[method.Name] = method
	}
	return methods
}

func pipeFromSourceFile(file string) (map[string]struct{}, error) {
	// Create a new file set
	fset := token.NewFileSet()

	// Parse the Go source file
	node, err := parser.ParseFile(fset, file, nil, parser.AllErrors)
	if err != nil {
		return nil, fmt.Errorf("error parsing file: %w", err)
	}

	rv := make(map[string]struct{})

	for _, decl := range node.Decls {
		fn, ok := decl.(*ast.FuncDecl)
		if !ok || fn.Recv == nil {
			continue
		}
		// check if the receiver is *Pipe
		if len(fn.Recv.List) != 1 {
			continue
		}
		if _, ok := fn.Recv.List[0].Type.(*ast.StarExpr); !ok {
			continue
		}
		if sel, ok := fn.Recv.List[0].Type.(*ast.StarExpr).X.(*ast.SelectorExpr); ok {
			if sel.Sel.Name != "Pipe" {
				continue
			}
		}
		if !isPublic(fn.Name.Name) {
			continue
		}
		rv[fn.Name.Name] = struct{}{}
	}

	return rv, nil
}

func isPublic(name string) bool {
	return strings.ToUpper(name[:1]) == name[:1]
}

var pipeMethodTemplate = template.Must(
	template.New("pipeMethodTemplate").
		Parse(`
func (p *Pipe) {{.Name}}({{.Params}}) *Pipe {
	p.Pipe = p.Pipe.{{.Name}}({{.Args}})
	return p
}
`))

var generatedTemplate = template.Must(
	template.New("generatedTemplate").
		Parse(`// Code generated by script-contextual/generator DO NOT EDIT.
package script

import (
	"io"
	"strings"
	"regexp"
	"net/http"
)

{{.Methods}}
`))

var flagSourceFile string

func init() {
	flag.StringVar(&flagSourceFile, "source", "", "source file to generate from")
}

func main() {
	flag.Parse()
	if flagSourceFile == "" {
		panic("source file is required")
	}

	pipeMethodsFromBitfield := pipeFromBitfield()
	pipeMethodsFromSource, err := pipeFromSourceFile(flagSourceFile)
	if err != nil {
		panic(err)
	}

	methodNamesSorted := make([]string, 0, len(pipeMethodsFromBitfield))
	for methodName := range pipeMethodsFromBitfield {
		methodNamesSorted = append(methodNamesSorted, methodName)
	}
	sort.Strings(methodNamesSorted)

	var methodsCode []string
	for _, methodName := range methodNamesSorted {
		if _, ok := pipeMethodsFromSource[methodName]; ok {
			continue
		}

		method := pipeMethodsFromBitfield[methodName]
		methodFuncType := method.Func.Type()
		var params []string
		var args []string
		// 0 is the method receiver
		for i := 1; i < methodFuncType.NumIn(); i++ {
			arg := methodFuncType.In(i)
			argName := fmt.Sprintf("a%d", i)
			if methodFuncType.IsVariadic() && i == methodFuncType.NumIn()-1 {
				params = append(params, fmt.Sprintf("%s ...%s", argName, arg.Elem().String()))
				args = append(args, fmt.Sprintf("%s...", argName))
			} else {
				params = append(params, fmt.Sprintf("%s %s", argName, arg.String()))
				args = append(args, argName)
			}
		}

		// convert method to template payload:
		// - Name: method name
		// - Params: method typed parameters
		// - Args: method parameters
		payload := map[string]string{
			"Name":   methodName,
			"Params": strings.Join(params, ", "),
			"Args":   strings.Join(args, ", "),
		}
		b := new(bytes.Buffer)
		if err := pipeMethodTemplate.Execute(b, payload); err != nil {
			panic(err)
		}

		methodsCode = append(methodsCode, b.String())
	}

	payload := map[string]string{
		"Methods": strings.Join(methodsCode, "\n"),
	}
	generatedCode := new(bytes.Buffer)
	if err := generatedTemplate.Execute(generatedCode, payload); err != nil {
		panic(err)
	}

	generatedCodeFormatted, err := script.
		Echo(generatedCode.String()).
		Exec("gofmt").
		// Tee(os.Stderr).
		String()
	if err != nil {
		panic(err)
	}

	fmt.Println(generatedCodeFormatted)
}
